#pragma config(Sensor, S1,     leftSensor,     sensorLightActive)
#pragma config(Sensor, S2,     rightSensor,    sensorLightActive)
#pragma config(Motor,  motorA,          leftMotor,     tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          rightMotor,    tmotorNXT, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int target = 0;

float kf = 0;
float kp = 12;
float kd = -40;

float velocity = 0;
float lastAngle = 0;
int sampleTime = 25;
int t = 0;

float leftDown = 39;
float leftMid = 43;
float leftUp = 63;
float leftAngle = -15;
float midAngle = 0;
float rightDown = 44;
float rightMid = 53;
float rightUp = 72;
float rightAngle = 15;

float getAngle(){
	int L = SensorValue[leftSensor];
	int R = SensorValue[rightSensor];
	float AngleFromLeft = 0;
	float AngleFromRight = 0;
	if(L<leftMid)
		AngleFromLeft = leftAngle + (midAngle-leftAngle)/(leftMid-leftDown)*((float)L-leftDown);
	else
		AngleFromLeft = midAngle + (rightAngle-midAngle)/(leftUp-leftMid)*((float)L-leftMid);
	if(R<rightMid)
		AngleFromRight = rightAngle+(midAngle-rightAngle)/(rightMid-rightDown)*((float)R-rightDown);
	else
		AngleFromRight = midAngle + (leftAngle-midAngle)/(rightUp-rightMid)*((float)R-rightMid);
	float angle =  -(AngleFromLeft+AngleFromRight)/2;
	nxtDisplayString(0,"%f",angle);
	if(abs(angle) < .5)
		return 0;
	else
	return angle;
}
float getVelocity(int t, int sampleTime){
	if(t == 0)
		lastAngle = getAngle();
	if(t==sampleTime){
		velocity =  (float)(getAngle()-lastAngle)/(float)sampleTime;
	}
		nxtDisplayString(1,"%f",velocity);
		return velocity;
}


int feedForeward(int input){
	int output = input*kf;
	return output;
}
int control(int input){
	
	int output = (int)(kp*(float)input+kd*getVelocity(t,10));
	nxtDisplayString(2,"%d",output);
	nxtDisplayString(3,"%f",kp*(float)input+kd*getVelocity(t,10));
	return output;
}
int plant(int input){
	motor[leftMotor] = input;
	motor[rightMotor] = input;
	return (int)getAngle();
}

task balance(){
	int output = 0;
	while(true){
		int c = control(target+output);
		int f = feedForeward(target);
		output = plant(f+c);
		wait1Msec(1);
		t++;
		if(t>= sampleTime)
			t=0;
		nxtDisplayString(5,"%d",SensorValue[leftSensor]);
		nxtDisplayString(6,"%d",SensorValue[rightSensor]);
	}
}

task main()
{
	while(true){
		int left0 = SensorValue[leftSensor];
		int right0 = SensorValue[rightSensor];
		nxtDisplayString(2,"%d",left0);
		nxtDisplayString(3,"%d",right0);
		startTask(balance);
		while(true){};
	}	
}
