#pragma config(Sensor, S1,     leftSensor,     sensorLightActive)
#pragma config(Sensor, S2,     rightSensor,    sensorLightActive)
#pragma config(Motor,  motorA,          leftMotor,     tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          rightMotor,    tmotorNXT, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int target = 0;

float kf = 0;
float kp = 4;
float kd = -20;

float leftDown = 41;
float leftMid = 50;
float leftUp = 62;
float leftAngle = -15;
float rightDown = 41;
float rightMid = 55;
float rightUp = 70;
float rightAngle = 15;

float getAngle(){
	float AngleFromLeft = leftAngle+((float)SensorValue[leftSensor]-leftDown)/(leftUp-leftDown)*(rightAngle-leftAngle);
	float AngleFromRight = rightAngle-((float)SensorValue[rightSensor]-rightDown)/(rightUp-rightDown)*(rightAngle-leftAngle);
	
	float angle =  -(AngleFromLeft+AngleFromRight)/2;
	nxtDisplayString(0,"%f",angle);
	return angle;
}
float getVelocity(int sampleTime){
	int temp = getAngle();
	wait1Msec(sampleTime);
	float velocity =  (float)(getAngle()-temp)/(float)sampleTime;
	nxtDisplayString(1,"%f",velocity);
	return velocity;
}


int feedForeward(int input){
	int output = input*kf;
	return output;
}
int control(int input){
	int output = (int)(kp*(float)input+kd*getVelocity(50));
	nxtDisplayString(2,"%d",output);
	nxtDisplayString(3,"%f",kp*(float)input+kd*getVelocity(50));
	return output;
}
int plant(int input){
	motor[leftMotor] = input;
	motor[rightMotor] = input;
	return (int)getAngle();
}

task balance(){
	int output = 0;
	while(true){
		int c = control(target+output);
		int f = feedForeward(target);
		output = plant(f+c);
	}
}

task main()
{
	while(true){
		int left0 = SensorValue[leftSensor];
		int right0 = SensorValue[rightSensor];
		startTask(balance);
		while(true){};
	}	
}
